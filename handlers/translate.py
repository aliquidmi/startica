from telegram import Update
from telegram.ext import CommandHandler, ContextTypes, MessageHandler, filters
from deep_translator import GoogleTranslator
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SUPPORTED_LANGUAGES = {
    'en': 'english',
    'fr': 'french',
    'de': 'german',
    'uk': 'ukrainian',
}

HELP_MESSAGE = (
    "üåç –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
    "<code>/translate &lt;–º–æ–≤–∞&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</code>\n\n"
    "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É:\n"
    "<code>en –ü—Ä–∏–≤—ñ—Ç</code>\n\n"
    "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏: en, fr, de, uk"
)

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.")
        lang, text = args[0].lower(), ' '.join(args[1:])
        await handle_translation(update, lang, text)
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≤ translate_command: {e}")
        await update.message.reply_text(HELP_MESSAGE, parse_mode="HTML")

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        parts = text.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
        lang, text_to_translate = parts[0].lower(), parts[1]
        await handle_translation(update, lang, text_to_translate)
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –≤ text_message_handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n\n" + HELP_MESSAGE, parse_mode="HTML")

async def handle_translation(update: Update, lang: str, text: str):
    try:
        if lang not in SUPPORTED_LANGUAGES:
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞: {lang}")

        if not text.strip():
            raise ValueError("–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")

        translator = GoogleTranslator(source='auto', target=lang)
        translated_text = translator.translate(text)
        logger.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ: '{text}' -> '{translated_text}' [{lang}]")
        await update.message.reply_text(f"üåç <b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b>\n{translated_text}", parse_mode="HTML")

    except ValueError as ve:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ve}")
        await update.message.reply_text(f"‚ùå {ve}\n\n{HELP_MESSAGE}", parse_mode="HTML")

    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {e}")
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

async def translate_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(HELP_MESSAGE, parse_mode="HTML")
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ HELP_MESSAGE: {e}")

def get_handler():
    lang_pattern = '|'.join(SUPPORTED_LANGUAGES.keys())
    return [
        CommandHandler("translate", translate_command),
        MessageHandler(filters.TEXT & filters.Regex(r'^üåç –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á$'), translate_button_handler),
        MessageHandler(filters.TEXT & filters.Regex(rf'^({lang_pattern})\s+'), text_message_handler),
    ]
