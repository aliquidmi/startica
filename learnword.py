import json, random, logging
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, ContextTypes, filters
from keyboards import get_main_keyboard, get_learnword_keyboard

logger = logging.getLogger(__name__)

USED_WORDS_FILE = 'used_words.json'
QUIZ_STATE = {}

DEFAULT_WORDS = [
    { "word": "apple", "translation": "—è–±–ª—É–∫–æ" },
    { "word": "dog", "translation": "—Å–æ–±–∞–∫–∞" },
    { "word": "sun", "translation": "—Å–æ–Ω—Ü–µ" },
    { "word": "book", "translation": "–∫–Ω–∏–≥–∞" },
    { "word": "water", "translation": "–≤–æ–¥–∞" },
    { "word": "cat", "translation": "–∫—ñ—Ç" },
    { "word": "tree", "translation": "–¥–µ—Ä–µ–≤–æ" },
    { "word": "sky", "translation": "–Ω–µ–±–æ" },
    { "word": "house", "translation": "–±—É–¥–∏–Ω–æ–∫" },
    { "word": "car", "translation": "–∞–≤—Ç–æ–º–æ–±—ñ–ª—å" },
    { "word": "table", "translation": "—Å—Ç—ñ–ª" },
    { "word": "pen", "translation": "—Ä—É—á–∫–∞" },
    { "word": "phone", "translation": "—Ç–µ–ª–µ—Ñ–æ–Ω" },
    { "word": "milk", "translation": "–º–æ–ª–æ–∫–æ" },
    { "word": "bread", "translation": "—Ö–ª—ñ–±" },
    { "word": "flower", "translation": "–∫–≤—ñ—Ç–∫–∞" },
    { "word": "mountain", "translation": "–≥–æ—Ä–∞" },
    { "word": "river", "translation": "—Ä—ñ—á–∫–∞" },
    { "word": "window", "translation": "–≤—ñ–∫–Ω–æ" },
    { "word": "door", "translation": "–¥–≤–µ—Ä—ñ" },
    { "word": "chair", "translation": "—Å—Ç—ñ–ª–µ—Ü—å" },
    { "word": "school", "translation": "—à–∫–æ–ª–∞" },
    { "word": "teacher", "translation": "–≤—á–∏—Ç–µ–ª—å" },
    { "word": "student", "translation": "—É—á–µ–Ω—å" },
    { "word": "music", "translation": "–º—É–∑–∏–∫–∞" },
    { "word": "game", "translation": "–≥—Ä–∞" },
    { "word": "fish", "translation": "—Ä–∏–±–∞" },
    { "word": "bird", "translation": "–ø—Ç–∞—Ö" },
    { "word": "horse", "translation": "–∫—ñ–Ω—å" },
    { "word": "road", "translation": "–¥–æ—Ä–æ–≥–∞" },
    { "word": "city", "translation": "–º—ñ—Å—Ç–æ" },
    { "word": "village", "translation": "—Å–µ–ª–æ" },
    { "word": "hat", "translation": "–∫–∞–ø–µ–ª—é—Ö" },
    { "word": "shirt", "translation": "—Å–æ—Ä–æ—á–∫–∞" },
    { "word": "shoe", "translation": "—á–µ—Ä–µ–≤–∏–∫" },
    { "word": "time", "translation": "—á–∞—Å" },
    { "word": "day", "translation": "–¥–µ–Ω—å" },
    { "word": "night", "translation": "–Ω—ñ—á" },
    { "word": "family", "translation": "—Å—ñ–º'—è" },
    { "word": "friend", "translation": "–¥—Ä—É–≥" },
    { "word": "computer", "translation": "–∫–æ–º–ø'—é—Ç–µ—Ä" },
    { "word": "work", "translation": "—Ä–æ–±–æ—Ç–∞" },
    { "word": "money", "translation": "–≥—Ä–æ—à—ñ" },
    { "word": "food", "translation": "—ó–∂–∞" },
    { "word": "drink", "translation": "–Ω–∞–ø—ñ–π" },
    { "word": "air", "translation": "–ø–æ–≤—ñ—Ç—Ä—è" },
    { "word": "fire", "translation": "–≤–æ–≥–æ–Ω—å" },
    { "word": "earth", "translation": "–∑–µ–º–ª—è" },
    { "word": "love", "translation": "–ª—é–±–æ–≤" },
    { "word": "peace", "translation": "–º–∏—Ä" }
]

def load_used_words():
    try:
        with open(USED_WORDS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ used_words.json: {e}")
        return []

def save_used_words(words):
    try:
        with open(USED_WORDS_FILE, 'w', encoding='utf-8') as f:
            json.dump(words, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ used_words.json: {e}")

async def show_random_word(update: Update):
    try:
        used_words = load_used_words()
        remaining = [w for w in DEFAULT_WORDS if w not in used_words]

        if not remaining:
            await update.message.reply_text("‚ú® –£—Å—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –≤–∏–≤—á–µ–Ω—ñ. –ù–æ–≤—ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º!")
            return

        word_pair = random.choice(remaining)
        used_words.append(word_pair)
        save_used_words(used_words)

        logger.info(f"–ù–æ–≤–µ —Å–ª–æ–≤–æ: {word_pair['word']} -> {word_pair['translation']}")
        await update.message.reply_text(
            f"üìò {word_pair['word']} ‚û°Ô∏è {word_pair['translation']}",
            reply_markup=get_learnword_keyboard()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É show_random_word: {e}")
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def start_quiz(update: Update):
    try:
        used = load_used_words()
        if not used:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            return

        user_id = update.effective_user.id
        word_pair = random.choice(used)
        QUIZ_STATE[user_id] = word_pair

        logger.info(f"–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è {user_id}: {word_pair['word']}")
        await update.message.reply_text(
            f"üß† –Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è: *{word_pair['word']}*?",
            parse_mode="Markdown",
            reply_markup=get_learnword_keyboard()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É start_quiz: {e}")
        await update.message.reply_text("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏.")

async def handle_quiz_answer(update: Update):
    try:
        user_id = update.effective_user.id
        user_answer = update.message.text.strip().lower()

        correct = QUIZ_STATE[user_id]['translation'].strip().lower()
        word = QUIZ_STATE[user_id]['word']

        if user_answer == correct:
            logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {word} -> {user_answer}")
            del QUIZ_STATE[user_id]
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {word} ‚Äî {correct}",
                reply_markup=get_learnword_keyboard()
            )
        else:
            logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {word} -> {user_answer} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct})")
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: *{word}*?",
                parse_mode="Markdown",
                reply_markup=get_learnword_keyboard()
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É handle_quiz_answer: {e}")
        await update.message.reply_text("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

async def learnword_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"/learnword –≤—ñ–¥ {update.effective_user.id}")
        await update.message.reply_text("üìö –í–∏–≤—á–∞–π –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è!",
                                        reply_markup=get_learnword_keyboard())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É learnword_command: {e}")

async def learnword_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    logger.info(f"–ú–µ–Ω—é –≤–∏–±—ñ—Ä: {text} –≤—ñ–¥ {user_id}")
    try:
        if text == "üìö –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤":
            await learnword_command(update, context)
        elif text == "–ù–æ–≤–µ —Å–ª–æ–≤–æ":
            await show_random_word(update)
        elif text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è":
            await start_quiz(update)
        elif text == "–ù–∞–∑–∞–¥":
            QUIZ_STATE.pop(user_id, None)
            await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        else:
            await handle_quiz_answer(update)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É learnword_menu_handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

def get_handler():
    return [
        CommandHandler("learnword", learnword_command),
        MessageHandler(filters.TEXT & filters.Regex(r"^(üìö –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤|–ù–æ–≤–µ —Å–ª–æ–≤–æ|–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è|–ù–∞–∑–∞–¥)$"), learnword_menu_handler),
        MessageHandler(filters.TEXT & (~filters.COMMAND), learnword_menu_handler)
    ]